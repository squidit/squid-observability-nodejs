"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.middleware = exports.APP_LOG_SUFFIX = void 0;
/*!
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const logging_1 = require("@google-cloud/logging");
const bunyan = require("bunyan");
const google_auth_library_1 = require("google-auth-library");
const index_1 = require("../index");
exports.APP_LOG_SUFFIX = 'applog';
/**
 * Express middleware
 */
async function middleware(options) {
    const defaultOptions = { logName: 'bunyan_log', level: 'info' };
    options = Object.assign({}, defaultOptions, options);
    const loggingBunyanApp = new index_1.LoggingBunyan(Object.assign({}, options, {
        // For request bundling to work, the parent (request) and child (app) logs
        // need to have distinct names. For exact requirements see:
        // https://cloud.google.com/appengine/articles/logging#linking_app_logs_and_requests
        logName: `${options.logName}_${exports.APP_LOG_SUFFIX}`,
    }));
    const logger = bunyan.createLogger({
        name: `${options.logName}_${exports.APP_LOG_SUFFIX}`,
        streams: [loggingBunyanApp.stream(options.level)],
    });
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const auth = loggingBunyanApp.cloudLog.logging.auth;
    const [env, projectId] = await Promise.all([
        auth.getEnv(),
        auth.getProjectId(),
    ]);
    // Unless we are running on Google App Engine or Cloud Functions, generate a
    // parent request log entry that all the request-specific logs ("app logs")
    // will nest under. GAE and GCF generate the parent request logs
    // automatically.
    // Cloud Run also generates the parent request log automatically, but skipping
    // the parent request entry has to be explicity enabled until the next major
    // release in which we can change the default behavior.
    let emitRequestLog;
    if (env !== google_auth_library_1.GCPEnv.APP_ENGINE &&
        env !== google_auth_library_1.GCPEnv.CLOUD_FUNCTIONS &&
        (env !== google_auth_library_1.GCPEnv.CLOUD_RUN || !options.skipParentEntryForCloudRun)) {
        const loggingBunyanReq = new index_1.LoggingBunyan(options);
        const requestLogger = bunyan.createLogger({
            name: options.logName,
            streams: [loggingBunyanReq.stream(options.level)],
        });
        emitRequestLog = (httpRequest, trace, span, sampled) => {
            requestLogger.info({
                [index_1.LOGGING_TRACE_KEY]: trace,
                [index_1.LOGGING_SPAN_KEY]: span,
                [index_1.LOGGING_SAMPLED_KEY]: sampled,
                httpRequest,
            });
        };
    }
    return {
        logger,
        mw: logging_1.middleware.express.makeMiddleware(projectId, makeChildLogger, emitRequestLog),
    };
    function makeChildLogger(trace, span) {
        return logger.child({ [index_1.LOGGING_TRACE_KEY]: trace, [index_1.LOGGING_SPAN_KEY]: span }, true /* simple child */);
    }
}
exports.middleware = middleware;
//# sourceMappingURL=express.js.map